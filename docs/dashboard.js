/**
 * Fountain Protocol Dashboard
 * Connects to GitHub Actions-generated data from HCS Topic 0.0.6591043
 */

class FountainDashboard {
    constructor() {
        this.dataUrl = './protocol-data.json'; // Generated by GitHub Actions
        this.historyUrl = './protocol-history.json'; // 7-day history
        this.updateInterval = 60000; // Update every minute
        this.chart = null;
        
        this.init();
    }

    async init() {
        console.log('🚀 Initializing Fountain Protocol Dashboard...');
        
        // Set up periodic updates
        this.loadDashboardData();
        setInterval(() => this.loadDashboardData(), this.updateInterval);
        
        // Initialize chart
        this.initializeChart();
        
        console.log('✅ Dashboard initialized');
    }

    async loadDashboardData() {
        try {
            console.log('📡 Fetching latest protocol data...');
            
            // Load current snapshot data
            const response = await fetch(this.dataUrl);
            if (!response.ok) {
                throw new Error(`Failed to fetch data: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('📊 Protocol data loaded:', data);
            
            // Update dashboard elements
            this.updateMetrics(data);
            this.updateEconomics(data);
            this.updateHCSStatus(data);
            this.updateLastUpdate();
            
            // Load and update historical chart
            await this.loadHistoricalData();
            
        } catch (error) {
            console.error('❌ Failed to load dashboard data:', error);
            this.showErrorState(error.message);
        }
    }

    updateMetrics(data) {
        const snapshot = data.latestSnapshot || {};
        const metrics = snapshot.metrics || {};
        
        // Active Members
        this.updateElement('activeDripHolders', metrics.totalDripHolders || '--');
        
        // Growth indicator
        const growthRate = metrics.growthRate || 0;
        const growthElement = document.getElementById('memberGrowth');
        if (growthElement) {
            const growthPercent = (growthRate * 100).toFixed(2);
            growthElement.textContent = `${growthPercent}% growth`;
            growthElement.className = 'growth-indicator ' + (growthRate >= 0 ? 'positive' : 'negative');
        }
        
        // Daily Entitlement
        this.updateElement('dailyEntitlement', metrics.finalEntitlement || '--');
        
        // Growth Multiplier
        const multiplier = metrics.growthMultiplier || 1.0;
        this.updateElement('growthMultiplier', multiplier.toFixed(2) + 'x');
        
        // New Donors
        this.updateElement('newDonors', metrics.newDonorsToday || '--');
        
        // Donor Booster
        const booster = metrics.donorBooster || 0;
        this.updateElement('donorBooster', `Booster: +${booster}`);
    }

    updateEconomics(data) {
        const snapshot = data.latestSnapshot || {};
        const metrics = snapshot.metrics || {};
        
        // Total WISH Allocated
        this.updateElement('totalWishAllocated', 
            this.formatNumber(metrics.totalWishToAllocate || 0));
        
        // Total HBAR Value
        const wishValue = (metrics.totalWishToAllocate || 0) * (metrics.exchangeRate || 0.001);
        this.updateElement('totalHbarValue', 
            wishValue.toFixed(4) + ' HBAR');
        
        // Growth Rate
        const growthRate = metrics.growthRate || 0;
        this.updateElement('growthRate', 
            (growthRate * 100).toFixed(2) + '%');
        
        // Cumulative Score (would need to be added to HCS data)
        this.updateElement('cumulativeScore', '--');
    }

    updateHCSStatus(data) {
        // HCS Topic ID (static)
        this.updateElement('hcsTopicId', '0.0.6591043');
        
        // Last Message Timestamp
        if (data.lastHCSMessage) {
            const lastMessage = new Date(data.lastHCSMessage).toLocaleString();
            this.updateElement('lastHcsMessage', lastMessage);
        }
        
        // Message Count
        this.updateElement('hcsMessageCount', data.totalMessages || '--');
        
        // Connection Status
        const statusElement = document.getElementById('hcsStatus');
        if (statusElement) {
            const isRecent = data.lastHCSMessage && 
                (Date.now() - new Date(data.lastHCSMessage).getTime()) < 86400000; // 24 hours
            
            if (isRecent) {
                statusElement.textContent = 'Connected';
                statusElement.className = 'status-indicator connected';
            } else {
                statusElement.textContent = 'Stale Data';
                statusElement.className = 'status-indicator disconnected';
            }
        }
    }

    async loadHistoricalData() {
        try {
            const response = await fetch(this.historyUrl);
            if (!response.ok) {
                console.warn('Historical data not available yet');
                return;
            }
            
            const historyData = await response.json();
            this.updateChart(historyData);
            
        } catch (error) {
            console.warn('Failed to load historical data:', error.message);
        }
    }

    initializeChart() {
        const ctx = document.getElementById('historyChart');
        if (!ctx) return;

        this.chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [], // Will be populated with dates
                datasets: [
                    {
                        label: 'Active Members',
                        data: [],
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y'
                    },
                    {
                        label: 'Daily Entitlement',
                        data: [],
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1'
                    },
                    {
                        label: 'Growth Multiplier',
                        data: [],
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y2'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Protocol Metrics Over Time'
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Date'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Active Members',
                            color: '#3b82f6'
                        },
                        grid: {
                            color: 'rgba(59, 130, 246, 0.1)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Daily Entitlement',
                            color: '#10b981'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    },
                    y2: {
                        type: 'linear',
                        display: false,
                        min: 1.0,
                        max: 1.5
                    }
                }
            }
        });
    }

    updateChart(historyData) {
        if (!this.chart || !historyData.snapshots) return;

        const snapshots = historyData.snapshots.slice(-7); // Last 7 days
        
        const labels = snapshots.map(s => {
            const date = new Date(s.date);
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        });
        
        const activeMembers = snapshots.map(s => s.metrics?.totalDripHolders || 0);
        const dailyEntitlements = snapshots.map(s => s.metrics?.finalEntitlement || 0);
        const growthMultipliers = snapshots.map(s => s.metrics?.growthMultiplier || 1.0);

        this.chart.data.labels = labels;
        this.chart.data.datasets[0].data = activeMembers;
        this.chart.data.datasets[1].data = dailyEntitlements;
        this.chart.data.datasets[2].data = growthMultipliers;
        
        this.chart.update();
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
            
            // Remove loading class if present
            element.classList.remove('loading');
        }
    }

    updateLastUpdate() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', {
            hour12: true,
            hour: 'numeric',
            minute: '2-digit'
        });
        this.updateElement('lastUpdate', `Updated ${timeString}`);
    }

    showErrorState(message) {
        console.error('Dashboard Error:', message);
        
        // Show error in key metrics
        const errorElements = [
            'activeDripHolders',
            'dailyEntitlement', 
            'growthMultiplier',
            'newDonors'
        ];
        
        errorElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = 'Error';
                element.className = 'metric-value error';
            }
        });
        
        // Update status
        const statusElement = document.getElementById('hcsStatus');
        if (statusElement) {
            statusElement.textContent = 'Error Loading';
            statusElement.className = 'status-indicator disconnected';
        }
    }

    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }
}

// Initialize dashboard when page loads
document.addEventListener('DOMContentLoaded', () => {
    new FountainDashboard();
});

// Add some demo data for testing
window.loadDemoData = function() {
    const demoData = {
        latestSnapshot: {
            date: new Date().toISOString().split('T')[0],
            timestamp: new Date().toISOString(),
            metrics: {
                totalDripHolders: 47,
                totalDripSupply: 47,
                newDonorsToday: 3,
                totalWishToAllocate: 2350,
                baseDailyRate: 50,
                growthRate: 0.0426,
                growthMultiplier: 1.2,
                donorBooster: 0,
                finalEntitlement: 60,
                exchangeRate: 0.001
            }
        },
        lastHCSMessage: new Date().toISOString(),
        totalMessages: 156
    };
    
    // Create demo JSON files for testing
    console.log('Demo data:', demoData);
    
    // Simulate loading this data
    const dashboard = new FountainDashboard();
    dashboard.updateMetrics(demoData);
    dashboard.updateEconomics(demoData);
    dashboard.updateHCSStatus(demoData);
    dashboard.updateLastUpdate();
};