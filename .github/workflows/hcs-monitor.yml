name: HCS Topic Monitor & Dashboard Update

on:
  schedule:
    # Run every 15 minutes to check for new HCS messages
    - cron: '*/15 * * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/hcs-monitor.yml'
      - 'scripts/hcs-monitor.js'

jobs:
  monitor-hcs-and-update-dashboard:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "Using built-in Node.js modules only"
    
    - name: Create Simplified HCS Monitor Script
      run: |
        mkdir -p scripts
        cat > scripts/hcs-monitor.js << 'EOF'
        /**
         * Simplified HCS Topic Monitor for GitHub Actions
         * Uses Mirror Node API instead of direct HCS subscription for better reliability
         */
        
        import https from 'https';
        import { promises as fs } from 'fs';
        import path from 'path';
        
        class HCSMonitor {
            constructor() {
                this.topicId = '0.0.6591043';
                this.outputDir = 'docs';
                this.mirrorNodeBase = 'https://testnet.mirrornode.hedera.com/api/v1';
                this.maxHistoryDays = 7;
            }
        
            async run() {
                console.log('🔍 Starting HCS Topic Monitor...');
                console.log(`📡 Monitoring topic: ${this.topicId}`);
                
                try {
                    await this.fetchMessagesFromMirrorNode();
                    console.log('✅ HCS monitoring completed successfully');
                } catch (error) {
                    console.error('❌ HCS monitoring failed:', error);
                    // Don't exit with error - use existing demo data instead
                    await this.updateTimestamps();
                    console.log('📊 Updated with demo data due to HCS fetch failure');
                }
            }
        
            async fetchMessagesFromMirrorNode() {
                console.log('📥 Fetching HCS messages from Mirror Node...');
                
                // Fetch last 50 messages from the topic
                const url = `${this.mirrorNodeBase}/topics/${this.topicId}/messages?limit=50&order=desc`;
                const messagesData = await this.makeHttpRequest(url);
                
                console.log(`📨 Retrieved ${messagesData.messages?.length || 0} messages`);
                
                await this.processMessages(messagesData.messages || []);
            }
        
            async processMessages(messages) {
                console.log('🔄 Processing messages and generating dashboard data...');
                
                // Filter for Fountain Protocol daily snapshots
                const protocolSnapshots = [];
                
                for (const message of messages) {
                    try {
                        // Decode base64 message content
                        const content = Buffer.from(message.message, 'base64').toString('utf8');
                        const parsedContent = JSON.parse(content);
                        
                        if (parsedContent.protocol === 'Fountain Protocol' && 
                            parsedContent.type === 'daily_snapshot') {
                            protocolSnapshots.push({
                                consensusTimestamp: message.consensus_timestamp,
                                protocolData: parsedContent
                            });
                            console.log(`📊 Found daily snapshot: ${parsedContent.snapshotDate}`);
                        }
                    } catch (parseError) {
                        // Skip non-JSON or non-protocol messages
                    }
                }
                
                console.log(`📊 Found ${protocolSnapshots.length} protocol snapshots`);
                
                // Sort by timestamp (newest first from Mirror Node API)
                protocolSnapshots.sort((a, b) => 
                    new Date(b.consensusTimestamp) - new Date(a.consensusTimestamp)
                );
                
                // Generate current protocol data
                const latestSnapshot = protocolSnapshots[0];
                const protocolData = {
                    lastUpdated: new Date().toISOString(),
                    latestSnapshot: latestSnapshot?.protocolData || null,
                    lastHCSMessage: latestSnapshot?.consensusTimestamp || null,
                    totalMessages: messages.length,
                    topicId: this.topicId,
                    source: 'mirror-node-api'
                };
                
                // Generate historical data (last 7 days)
                const cutoffDate = new Date();
                cutoffDate.setDate(cutoffDate.getDate() - this.maxHistoryDays);
                
                const recentSnapshots = protocolSnapshots.filter(m => 
                    new Date(m.consensusTimestamp) >= cutoffDate
                );
                
                const historyData = {
                    generatedAt: new Date().toISOString(),
                    period: `${this.maxHistoryDays} days`,
                    snapshots: recentSnapshots.map(m => m.protocolData),
                    totalSnapshots: recentSnapshots.length
                };
                
                // Write data files
                await this.writeDataFiles(protocolData, historyData);
                
                // Generate summary for GitHub Actions
                this.generateActionsSummary(protocolData, historyData);
            }
        
            async updateTimestamps() {
                // Update existing demo data with current timestamp
                try {
                    const protocolPath = path.join(this.outputDir, 'protocol-data.json');
                    const existingData = JSON.parse(await fs.readFile(protocolPath, 'utf8'));
                    
                    existingData.lastUpdated = new Date().toISOString();
                    existingData.source = 'demo-data-updated';
                    
                    await fs.writeFile(protocolPath, JSON.stringify(existingData, null, 2));
                    console.log('✅ Updated demo data timestamps');
                } catch (error) {
                    console.warn('⚠️ Could not update demo data:', error.message);
                }
            }
        
            async writeDataFiles(protocolData, historyData) {
                try {
                    // Ensure output directory exists
                    await fs.mkdir(this.outputDir, { recursive: true });
                    
                    // Write current protocol data
                    const protocolPath = path.join(this.outputDir, 'protocol-data.json');
                    await fs.writeFile(protocolPath, JSON.stringify(protocolData, null, 2));
                    console.log(`✅ Written protocol data to ${protocolPath}`);
                    
                    // Write historical data
                    const historyPath = path.join(this.outputDir, 'protocol-history.json');
                    await fs.writeFile(historyPath, JSON.stringify(historyData, null, 2));
                    console.log(`✅ Written history data to ${historyPath}`);
                    
                    // Write metadata for GitHub Pages
                    const metadata = {
                        lastBuild: new Date().toISOString(),
                        topicId: this.topicId,
                        hasLatestSnapshot: !!protocolData.latestSnapshot,
                        snapshotsFound: historyData.totalSnapshots,
                        dataFiles: ['protocol-data.json', 'protocol-history.json']
                    };
                    
                    const metadataPath = path.join(this.outputDir, 'build-metadata.json');
                    await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));
                    console.log(`✅ Written metadata to ${metadataPath}`);
                    
                } catch (error) {
                    console.error('❌ Failed to write data files:', error);
                    throw error;
                }
            }
        
            generateActionsSummary(protocolData, historyData) {
                const latestSnapshot = protocolData.latestSnapshot;
                
                if (latestSnapshot && latestSnapshot.metrics) {
                    const metrics = latestSnapshot.metrics;
                    console.log('📊 PROTOCOL SUMMARY:');
                    console.log(`   Date: ${latestSnapshot.snapshotDate}`);
                    console.log(`   Active Members: ${metrics.totalDripHolders || 'N/A'}`);
                    console.log(`   Daily Entitlement: ${metrics.finalEntitlement || 'N/A'} WISH`);
                    console.log(`   Growth Multiplier: ${metrics.growthMultiplier || 'N/A'}x`);
                    console.log(`   New Donors: ${metrics.newDonorsToday || 'N/A'}`);
                    console.log(`   Total WISH Allocated: ${metrics.totalWishToAllocate || 'N/A'}`);
                } else {
                    console.log('⚠️ No recent protocol snapshots found - using demo data');
                }
                
                console.log(`📈 Historical data: ${historyData.totalSnapshots} snapshots over ${historyData.period}`);
            }
        
            makeHttpRequest(url) {
                return new Promise((resolve, reject) => {
                    console.log(`🌐 Fetching: ${url}`);
                    
                    const req = https.get(url, (res) => {
                        let data = '';
                        
                        res.on('data', (chunk) => {
                            data += chunk;
                        });
                        
                        res.on('end', () => {
                            try {
                                const jsonData = JSON.parse(data);
                                resolve(jsonData);
                            } catch (error) {
                                reject(new Error(`JSON parse error: ${error.message}`));
                            }
                        });
                    });
                    
                    req.on('error', (error) => {
                        reject(new Error(`HTTP request error: ${error.message}`));
                    });
                    
                    req.setTimeout(30000, () => {
                        req.destroy();
                        reject(new Error('HTTP request timeout'));
                    });
                });
            }
        }
        
        // Run the monitor
        const monitor = new HCSMonitor();
        monitor.run();
        EOF
    
    - name: Run HCS Monitor
      run: |
        cd scripts
        node hcs-monitor.js
    
    - name: Commit and push data files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/*.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update protocol data from HCS topic $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
        fi
    
    - name: Setup GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
    
    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4

  # Job summary
  notify-completion:
    needs: monitor-hcs-and-update-dashboard
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Job Summary
      run: |
        echo "## 🌊 Fountain Protocol Dashboard Update" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**HCS Topic:** 0.0.6591043" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.monitor-hcs-and-update-dashboard.result }}" == "success" ]; then
          echo "✅ **Status:** Dashboard updated successfully" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Dashboard:** [View Live Dashboard](https://opento-suggestions.github.io/hbar-fountain/)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Dashboard update failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Data Sources:**" >> $GITHUB_STEP_SUMMARY
        echo "- HCS Topic messages (real-time)" >> $GITHUB_STEP_SUMMARY
        echo "- Daily snapshots (protocol metrics)" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Actions (automated updates)" >> $GITHUB_STEP_SUMMARY